base_global_planner: navfn/NavfnROS #default
# base_global_planner: carrot_planner/CarrotPlanner


#base_local_planner: base_local_planner/TrajectoryPlannerROS #default
base_local_planner: dwa_local_planner/DWAPlannerROS
#base_local_planner: teb_local_planner/TebLocalPlannerROS


# controller_frequency: 10.0 # (double, default: 20.0) The rate in Hz at which to run the control loop and send velocity commands to the base.
# planner_frequency: 10.0 # (double, default: 0.0) The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked.
shutdown_costmaps: false
controller_frequency: 10.0
planner_patience: 5.0
controller_patience: 15.0
conservative_reset_dist: 3.0
planner_frequency: 0.0
oscillation_timeout: 10.0 #to trigger recovery behaviors
oscillation_distance: 0.2


#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#


TrajectoryPlannerROS:
  holonomic_robot: false

  sim_time: 1.0 # (double, default: 1.0) The amount of time to forward-simulate trajectories in seconds
  yaw_goal_tolerance: 0.2 # (double, default: 0.05) The tolerance in radians for the controller in yaw/rotation when achieving its goal
  xy_goal_tolerance: 0.15 #  (double, default: 0.10) The tolerance in meters for the controller in the x & y distance when achieving a goal
  latch_xy_goal_tolerance: true # (bool, default: false) If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.
  meter_scoring: true # (bool, default: false) Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default. 

  # Robot Configuration Parameters
  max_vel_x: 0.18
  min_vel_x: 0.08

  max_vel_theta:  1.0
  min_vel_theta: -1.0
  min_in_place_vel_theta: 1.0

  acc_lim_x: 1.0
  acc_lim_y: 0.0
  acc_lim_theta: 0.6

  # Forward Simulation Parameters
  vx_samples: 18
  vtheta_samples: 20
  sim_granularity: 0.05


#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#

DWAPlannerROS:
  holonomic_robot: false

  # Robot Configuration Parameters
  max_vel_x: 0.2
  min_vel_x: 0.0

  max_vel_y: 0.0
  min_vel_y: 0.0

  # The velocity when robot is moving in a straight line
  max_vel_trans:  0.22
  min_vel_trans:  0.11

  max_vel_theta: 1.82
  min_vel_theta: 0.5

  acc_lim_x: 2.5
  acc_lim_y: 0.0
  acc_lim_theta: 2.5 

  # Goal Tolerance Parametes
  xy_goal_tolerance: 0.05
  yaw_goal_tolerance: 0.17
  latch_xy_goal_tolerance: false

  # Forward Simulation Parameters
  sim_time: 1
  vx_samples: 20
  vy_samples: 0
  vth_samples: 40
  controller_frequency: 10.0

  # Trajectory Scoring Parameters
  path_distance_bias: 32.0
  goal_distance_bias: 20.0
  occdist_scale: 0.02
  forward_point_distance: 0.325
  stop_time_buffer: 0.2
  scaling_speed: 0.25
  max_scaling_factor: 0.2

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05

  # Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true


#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#


TebLocalPlannerROS:

  odom_topic: thorvald_001/odom
    
  # Trajectory

  teb_autosize: True
  dt_ref: 0.3
  dt_hysteresis: 0.1
  max_samples: 500
  global_plan_overwrite_orientation: True
  allow_init_with_backwards_motion: True
  max_global_plan_lookahead_dist: 3.0
  global_plan_viapoint_sep: -1
  global_plan_prune_distance: 1
  exact_arc_length: False
  feasibility_check_no_poses: 2
  publish_feedback: False
    
  # Robot
         
  max_vel_x: 0.2
  min_vel_x: -0.2
  max_vel_x_backwards: 0.2
  max_vel_y: 0.0
  max_vel_theta: 1.82 # the angular velocity is also bounded by min_turning_radius in case of a carlike robot (r = v / omega)
  min_vel_theta: 0.9 
  acc_lim_x: 2.5
  acc_lim_theta: 0.5


  footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
   type: "line"
   radius: 0.2 # for type "circular"
   line_start: [0.0, 0.0] # for type "line"
   line_end: [0.4, 0.0] # for type "line"
   front_offset: 0.2 # for type "two_circles"
   front_radius: 0.2 # for type "two_circles"
   rear_offset: 0.2 # for type "two_circles"
   rear_radius: 0.2 # for type "two_circles"
   vertices: [ [0.25, -0.05], [0.18, -0.05], [0.18, -0.18], [-0.19, -0.18], [-0.25, 0], [-0.19, 0.18], [0.18, 0.18], [0.18, 0.05], [0.25, 0.05] ] # for type "polygon"

  # GoalTolerance
    
  xy_goal_tolerance: 0.2
  yaw_goal_tolerance: 0.1
  free_goal_vel: False
  complete_global_plan: True
    
  # Obstacles
    
  min_obstacle_dist: 0.27 # This value must also include our robot's expansion, since footprint_model is set to "line".
  inflation_dist: 0.6
  include_costmap_obstacles: True
  costmap_obstacles_behind_robot_dist: 1.0
  obstacle_poses_affected: 15

  dynamic_obstacle_inflation_dist: 0.6
  include_dynamic_obstacles: True 

  costmap_converter_plugin: ""
  costmap_converter_spin_thread: True
  costmap_converter_rate: 5

  # Optimization
    
  no_inner_iterations: 5
  no_outer_iterations: 4
  optimization_activate: True
  optimization_verbose: False
  penalty_epsilon: 0.1
  obstacle_cost_exponent: 4
  weight_max_vel_x: 2
  weight_max_vel_theta: 1
  weight_acc_lim_x: 1
  weight_acc_lim_theta: 1
  weight_kinematics_nh: 1000
  weight_kinematics_forward_drive: 1
  weight_kinematics_turning_radius: 1
  weight_optimaltime: 1 # must be > 0
  weight_shortest_path: 0
  weight_obstacle: 100
  weight_inflation: 0.2
  weight_dynamic_obstacle: 10 # not in use yet
  weight_dynamic_obstacle_inflation: 0.2
  weight_viapoint: 1
  weight_adapt_factor: 2

  # Homotopy Class Planner

  enable_homotopy_class_planning: True
  enable_multithreading: True
  max_number_classes: 4
  selection_cost_hysteresis: 1.0
  selection_prefer_initial_plan: 0.95
  selection_obst_cost_scale: 1.0
  selection_alternative_time_cost: False

  roadmap_graph_no_samples: 15
  roadmap_graph_area_width: 5
  roadmap_graph_area_length_scale: 1.0
  h_signature_prescaler: 0.5
  h_signature_threshold: 0.1
  obstacle_heading_threshold: 0.45
  switching_blocking_period: 0.0
  viapoints_all_candidates: True
  delete_detours_backwards: True
  max_ratio_detours_duration_best_duration: 3.0
  visualize_hc_graph: False
  visualize_with_time_as_z_axis_scale: False

  # Recovery

  # shrink_horizon_backup: True
  # shrink_horizon_min_duration: 10
  # oscillation_recovery: True
  # oscillation_v_eps: 0.1
  # oscillation_omega_eps: 0.1
  # oscillation_recovery_min_duration: 10
  # oscillation_filter_duration: 10



#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#



NavfnROS:
  visualize_potential: true # (bool, default: false) Specifies whether or not to visualize the potential area computed via a PointCloud2.
  use_dijkstra: false # (bool, default: true) If true, use dijkstra's algorithm. Otherwise, A*.


#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#

recovery_behaviors:
 - {name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}
 - {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}

conservative_reset:
 layer_names: ["obstacle_layer"]
 reset_distance: 1.0

aggressive_reset:
 layer_names: ["obstacle_layer"]
 reset_distance: 0.38 #distance from rotation centre to tail (0.32m) + 6cm slack
